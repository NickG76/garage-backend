// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments (id, user_id, datetime, description)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, datetime, description, status, created_at
`

type CreateAppointmentParams struct {
	ID          uuid.UUID
	UserID      uuid.NullUUID
	Datetime    time.Time
	Description sql.NullString
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointment,
		arg.ID,
		arg.UserID,
		arg.Datetime,
		arg.Description,
	)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Datetime,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, name, email, password_hash, phone, is_admin)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, email, password_hash, phone, is_admin, created_at
`

type CreateUserParams struct {
	ID           uuid.UUID
	Name         string
	Email        string
	PasswordHash string
	Phone        string
	IsAdmin      sql.NullBool
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Phone,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const getAllAppointments = `-- name: GetAllAppointments :many
SELECT id, user_id, datetime, description, status, created_at FROM appointments ORDER BY created_at DESC
`

func (q *Queries) GetAllAppointments(ctx context.Context) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, getAllAppointments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Datetime,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppointmentsForUser = `-- name: GetAppointmentsForUser :many
SELECT id, user_id, datetime, description, status, created_at FROM appointments WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetAppointmentsForUser(ctx context.Context, userID uuid.NullUUID) ([]Appointment, error) {
	rows, err := q.db.QueryContext(ctx, getAppointmentsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Appointment
	for rows.Next() {
		var i Appointment
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Datetime,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, phone, is_admin, created_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Phone,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const updateAppointmentStatus = `-- name: UpdateAppointmentStatus :exec
UPDATE appointments SET status = $2 WHERE id = $1
`

type UpdateAppointmentStatusParams struct {
	ID     uuid.UUID
	Status string
}

func (q *Queries) UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateAppointmentStatus, arg.ID, arg.Status)
	return err
}
